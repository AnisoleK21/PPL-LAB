------------------------------------
B-4 Common Subexpression Elimination
------------------------------------
;; Function main (main, funcdef_no=0, de|;; Function main (main, funcdef_no=0, decl_uid=1907, cgraph_uid=1, symbol_order=0)
cl_uid=1907, cgraph_uid=1, symbol_order=|
0)                                      |;; 1 loops found
                                        |;;
main ()                                 |;; Loop 0
{                                       |;;  header 0, latch 1
  int c;                                |;;  depth 0, outer -1
  int b;                                |;;  nodes: 0 1 2
  int a;                                |;; 2 succs { 1 }
  int _1;                               |main ()
  int _2;                               |{
  int _3;                               |  int c;
  int _8;                               |  int b;
                                        |  int a;
  <bb 2> :                              |  int _1;
  _1 = a_4(D) + c_5(D);                 |  int _2;
  _2 = b_6(D) + _1;                     |
  _3 = c_5(D) + a_4(D);                 |  <bb 2> :
  b_7 = _2 * _3;                        |  _1 = a_4(D) + c_5(D);
  _8 = b_7;                             |  _2 = _1 + b_6(D);
  return _8;                            |  b_7 = _1 * _2;
                                        |  return b_7;
}                                       |
                                        |}
Solution
--------

        1   The original code showed two computations, but the FRE pass was able
            to  reuse the  temporary variable  which  stored the  result of  the
            intitial computation  of (a +  c). Thus,  one line of  execution was
            saved, and so was the use of an extra variable.

        2   Check  the   file  B-4.c.*.optimized.   This  is  the   last  GIMPLE
            intra-procedural pass. If  it is same as the output  of FRE, then no
            more optimizations have occured.

        3   "return  b" was  required to  make the  computation of  variable `b'
            meaningful. If function  `main' is going to "return 0"  and there is
            no other  output, GCC  will realise that  the entire  computation of
            variable `b' was  dead code and will eliminate  its dependencies one
            by one until the resulting program reduces to:
        
                int main()
                {
                    return 0;
                }